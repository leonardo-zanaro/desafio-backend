<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API</name>
    </assembly>
    <members>
        <member name="M:API.Controllers.AuthController.Login(Application.DTOs.UserInfo.Login)">
            <summary>
            Logs a user in.
            </summary>
            <param name="userInfo">The user information.</param>
            <returns>The token generated for the logged-in user.</returns>
            <remarks>
            This method logs a user in using the provided user information. It calls the PasswordSignInAsync
            method of the SignInManager to verify the username and password. If the login is successful,
            it returns a token generated for the logged-in user. Otherwise, it returns a BadRequest response
            with an error message.
            </remarks>
        </member>
        <member name="M:API.Controllers.AuthController.CreateUser(Application.DTOs.UserInfo.Register)">
            <summary>
            Creates a new user.
            </summary>
            <param name="model">The user information.</param>
            <returns>The token generated for the new user.</returns>
            <remarks>
            This method creates a new user using the provided user information. It creates a new User instance with
            the provided email and password, sets the user's role to "Common", and attempts to create the user in
            the user manager. If the user creation is successful, it returns a token generated for the new user.
            Otherwise, it returns a BadRequest response with an error message.
            </remarks>
        </member>
        <member name="M:API.Controllers.AuthController.GetUserLogged">
            <summary>
            Retrieves the logged-in user.
            </summary>
            <returns>The logged-in user information.</returns>
            <exception cref="T:Microsoft.AspNetCore.Mvc.BadRequestResult">Thrown when the token has expired.</exception>
        </member>
        <member name="M:API.Controllers.AuthController.BuildToken(Application.DTOs.UserInfo.Login)">
            <summary>
            Builds a JWT token for the given user information.
            </summary>
            <param name="userInfo">The user information.</param>
            <returns>The built JWT token.</returns>
        </member>
        <member name="M:API.Controllers.AuthController.GenerateClaims(Domain.Entities.User)">
            <summary>
            Generates claims for a given user.
            </summary>
            <param name="user">The user for whom the claims are generated.</param>
            <returns>A <see cref="T:System.Security.Claims.ClaimsIdentity"/> object containing the generated claims.</returns>
        </member>
        <member name="M:API.Controllers.DelivererController.CreateDeliverer(Application.DTOs.DelivererDto)">
            <summary>
            Creates a new deliverer.
            </summary>
            <param name="model">The deliverer's information.</param>
            <returns>An IActionResult indicating the result of the operation.</returns>
        </member>
        <member name="M:API.Controllers.DelivererController.UploadDocument(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Uploads a document for the deliverer.
            </summary>
            <param name="file">The file to be uploaded.</param>
            <returns>An IActionResult indicating the result of the operation.</returns>
        </member>
        <member name="M:API.Controllers.MotorcycleController.CreateMotorcycle(Application.DTOs.MotorcycleDto)">
            <summary>
            Creates a new motorcycle with the specified details.
            </summary>
            <param name="model">The MotorcycleDto object containing the details of the motorcycle.</param>
            <returns>A IActionResult representing the HTTP response. Returns Ok if the motorcycle is successfully created. Returns BadRequest if an error occurs.</returns>
        </member>
        <member name="M:API.Controllers.MotorcycleController.GetAll">
            <summary>
            Retrieves all motorcycles.
            </summary>
            <returns>
            An IEnumerable of Motorcycle objects representing all the motorcycles.
            </returns>
        </member>
        <member name="M:API.Controllers.MotorcycleController.GetByPlate(System.String)">
            <summary>
            Retrieves a motorcycle by its license plate.
            </summary>
            <param name="plate">The license plate of the motorcycle.</param>
            <returns>The Motorcycle object representing the motorcycle with the specified license plate. Returns null if no motorcycle is found.</returns>
        </member>
        <member name="M:API.Controllers.MotorcycleController.ChangePlate(System.Guid,System.String)">
            <summary>
            Changes the license plate of a motorcycle identified by its ID.
            </summary>
            <param name="motorcycleId">The ID of the motorcycle to change the license plate for.</param>
            <param name="newPlate">The new license plate value.</param>
            <returns>A IActionResult representing the HTTP response. Returns Ok if the license plate is successfully changed. Returns BadRequest if the motorcycle is not found or an unexpected error occurs.</returns>
        </member>
        <member name="M:API.Controllers.MotorcycleController.RemoveMotorcycle(System.Guid)">
            <summary>
            Removes a motorcycle with the specified ID.
            </summary>
            <param name="motorcycleId">The ID of the motorcycle to remove.</param>
            <returns>An IActionResult representing the HTTP response. Returns Ok if the motorcycle is successfully removed. Returns BadRequest if an error occurs, such as if the motorcycle is not found or has an active lease.</returns>
        </member>
        <member name="M:API.Controllers.RentalController.RentMotorcycle(System.Guid,System.Guid,System.Guid)">
            <summary>
            Rents a motorcycle to a deliverer for a specific rental period.
            </summary>
            <param name="delivererId">The ID of the deliverer who is renting the motorcycle.</param>
            <param name="motorcycleId">The ID of the motorcycle being rented.</param>
            <param name="rentalPeriodId">The ID of the rental period.</param>
            <param name="endDate">The end date of the rental period.</param>
            <returns>Returns an IActionResult indicating the result of the operation.</returns>
        </member>
        <member name="M:API.Controllers.RentalController.ReturnMotorcycle(System.Guid)">
            <summary>
            Returns a motorcycle.
            </summary>
            <param name="motorcycleId">The ID of the motorcycle to return.</param>
            <returns>Returns an IActionResult indicating the result of the operation.</returns>
        </member>
    </members>
</doc>
